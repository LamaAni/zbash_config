#!/usr/bin/env bash
: ${LIB_PATH:="$(dirname ${BASH_SOURCE[0]})"}

SHELL_IS_INTERACTIVE=0
"$LIB_PATH/detect_interactive_shell"
if [ $? -eq 0 ]; then
  SHELL_IS_INTERACTIVE=1
fi

function log_core() {
  local prefex="$1"
  shift
  echo "[$(date '+%Y-%m-%d %H:%M:%S')]][$prefex]" "$@"
}

function log() {
  log_core INFO "$@"
}

function assert() {
  local error_code="$1"
  shift
  if [ "$error_code" -ne 0 ]; then
    log_core ERROR "$@"
    return "$error_code"
  fi
}

function get_yes_no() {
  if [ $SHELL_IS_INTERACTIVE -eq 0 ]; then
    export REPLY="y"
    return 0
  fi
  while true; do
    read -p "$LOG_PREFEX$1 [y/n]: " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[YyNn]$ ]]; then
      assert 3 "Input invalid: you must specify y or n."
      continue
    else
      export REPLY
      if [[ $REPLY =~ ^[Yy]$ ]]; then
        return 0
      else
        return 1
      fi
    fi
  done
}

: ${OSH:="$HOME/.oh-my-bash"}
: ${OSH_CUSTOM:="$OSH/custom"}

log "Looking for oh-my-bash @ $OSH"

# check for oh_my_bash
if [ ! -d "$OSH" ]; then
  log "The script requires the installation of oh_my_bash @ ~/.oh_my_bash, repo not found."
  get_yes_no "Would you like to install oh-my-bash now? (requires git, curl) [y/n] "
else
  # Install script for bash configuration.
  log "This package installs the zlib/bash-config. This script will alter the current configuration of oh_my_bash, and augment .bashrc"
  get_yes_no "Are you sure?"
fi

assert $? "Aborted" || exit $?

if [ -d "$OSH" ]; then
  rm -Rf "$OSH"
  assert $? "Failed to remove $OSH" || exit $?
fi

log "Cloning remote repo.."
log "Installing oh-my-bash.. (skipping bash terimal - will be executed later)"
OH_MY_BASH_INSTALL=$(curl -fsSL "https://raw.githubusercontent.com/ohmybash/oh-my-bash/master/tools/install.sh")
OH_MY_BASH_INSTALL=$(echo "$OH_MY_BASH_INSTALL" | sed -e "s/exec bash; source \\\$HOME\\/[.]bashrc//g")

bash -c "$OH_MY_BASH_INSTALL"
assert $? "Failed to install oh-my-bash, aborting" || exit $?

OSH_CUSTOM_THEMES="$OSH_CUSTOM/themes"
themes_src=$(realpath $LIB_PATH/../themes)

log "Linking themes to $OSH_CUSTOM_THEMES"
for d in $themes_src/*/; do
  target_name="$OSH_CUSTOM_THEMES/$(basename $d)"
  log "Linking $d -> $target_name"
  ln -sf "$d" "$target_name"
done

OSH_CUSTOM_ALIASES="$OSH_CUSTOM/aliases"
aliases_src=$(realpath $LIB_PATH/../aliases)
log "Linking aliases to $OSH_CUSTOM_ALIASES"
for f in $aliases_src/*; do
  target_name="$OSH_CUSTOM_ALIASES/$(basename $f)"
  log "Linking $f -> $target_name"
  ln -sf "$f" "$target_name"
done

BASHRC_PATH="$HOME/.bashrc"
log "Augmenting bashrc @ $BASHRC_PATH"

function update_bashrc() {
  local call_command="
# adding zlib aliases
aliases+=(z-lib-config)

source \$OSH/oh-my-bash.sh  
"

  sed -i 's/^\s*source .OSH.*$/# OSH command transffered to end/g' "$BASHRC_PATH" &&
    sed -i 's/^\s*OSH_THEME=.*$/export OSH_THEME="z-lib-bash"/g' "$BASHRC_PATH" &&
    echo "$call_command" >>"$BASHRC_PATH"
  assert $? "Failed to replace expressions"
}

update_bashrc
assert $? "could not augment bashrc" || exit 1
log "Done."

VALIDATE_CHANGED=$(cat ~/.bashrc | grep "OSH_THEME")
if [ "$VALIDATE_CHANGED" == 'OSH_THEME="font"' ]; then
  assert 1 "ERROR: Failed to replace osh theme" || exit $?
fi

log "Complete. Enter a new bash terminal to see the result using:
$> bash
"
