#!/bin/bash
type curl >&2
if [ $? -ne 0 ]; then
  echo "Curl must be installed"
fi

function assert() {
  local code="$1"
  shift
  if [ "$code" -ne 0 ]; then
    echo "ERROR: " "$@"
  fi
  return "$code"
}

HELP="
Installs the zbash-config library
USAGE: [version]
INPUTS:
  version     The version to use. Defautls to latest.
ARGS:
  --location  Install into a specific location.
"

INSTALL_LOCATION="/usr/local/bin/zbash_config"
RUN_INSTALL="true"

while [ "$#" -gt 0 ]; do
  case $1 in
  -h | --help)
    echo "$HELP"
    exit 0
    ;;
  -l | --location)
    shift
    INSTALL_LOCATION="$1"
    ;;
  --skip-install)
    RUN_INSTALL="false"
    ;;
  -*)
    assert 2 "Invalid argument: $1"
    ;;
  *)
    : "${positional:=0}"
    case $positional in
    0)
      VERSION="$1"
      ;;
    *)
      assert 2 "Invalid input: $1" || return $?
      ;;
    esac
    positional=$((positional + 1))
    ;;
  esac
  shift
done

: "${VERSION:="latest"}"

TEMP_DOWNLOAD_PATH="$(mktemp)"
REPO_SUBPATH="LamaAni/zbash-config"

function install_lib() {
  URL_BRANCH="$VERSION"
  if [ "$URL_BRANCH" == "latest" ]; then
    URL_BRANCH="master"
  fi
  GET_SCRIPT_URL="https://raw.githubusercontent.com/$REPO_SUBPATH/$URL_BRANCH/get?v_$(date +"%S")=$RANDOM"
  echo "$GET_SCRIPT_URL"
  curl -sL "$GET_SCRIPT_URL" | bash -s "$VERSION" >|"$TEMP_DOWNLOAD_PATH"
  assert $? "Failed to download zbash_config compiled script" || return $?

  source "$TEMP_DOWNLOAD_PATH"
  assert $? "Failed to load zbash_config script, error in script?" || return $?

  log:sep "Installing zbash-config as $(whoami)"
  log "Checking required premissions"
  if [ "$(whoami)" != "root" ]; then
    log "checking if sudo is available..."
    type sudo >/dev/null 2>&1
    if [ $? -ne 0 ]; then
      warn 2 "Sudo not found. Attempting to install with user $(whoami)"
    else
      assert 2 "Sudo found, please rerun as root" || return $?
    fi
  fi

  if [ -f "$INSTALL_LOCATION" ]; then
    rm -rf "$INSTALL_LOCATION"
    assert $? "Failed to remove old code" || return $?
  fi

  log "Downloading.."

  cat "$TEMP_DOWNLOAD_PATH" >"$INSTALL_LOCATION" && chmod +x "$INSTALL_LOCATION"
  log "Installed OK -> $INSTALL_LOCATION ($(wc -l $INSTALL_LOCATION) lines)"
}

function cleanup() {
  local code=$?
  rm -rf "$TEMP_DOWNLOAD_PATH"
  assert "$@" || return $?
}

install_lib && install_bashrc
cleanup $? "Failed to install" || exit $?
