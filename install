#!/bin/bash
type curl >/dev/null
if [ $? -ne 0 ]; then
  echo "Curl must be installed"
fi

type assert &>/dev/null
if [ $? -ne 0 ] || [ "$ZBASH_COMMONS_LIB_LOADED" != "true" ]; then
  type zbash_commons &>/dev/null
  if [ $? -ne 0 ]; then
    echo "[DOWNLOAD] Downloading zbash_commons from latest release.." 1>&2
    ZBASH_COMMONS_GET_SCRIPT="$(curl -Ls "https://raw.githubusercontent.com/LamaAni/zbash-commons/master/get?ts_$(date +%s)=$RANDOM")"
    ZBASH_COMMONS="$(bash -c "$ZBASH_COMMONS_GET_SCRIPT")"
    eval "$ZBASH_COMMONS"
  else
    source zbash_commons
  fi
fi

HELP="
Installs the zbash-config library
USAGE: [version]
INPUTS:
  version     The version to use. Defautls to latest.
ARGS:
  --location  Install into a specific location.
"

INSTALL_LOCATION="$HOME/.local/bin"

while [ "$#" -gt 0 ]; do
  case $1 in
  -h | --help)
    echo "$HELP"
    exit 0
    ;;
  -l | --location)
    shift
    INSTALL_LOCATION="$1"
    ;;
  -*)
    assert 2 "Invalid argument: $1"
    ;;
  *)
    : "${positional:=0}"
    case $positional in
    0)
      VERSION="$1"
      ;;
    *)
      assert 2 "Invalid input: $1" || return $?
      ;;
    esac
    positional=$((positional + 1))
    ;;
  esac
  shift
done

: "${VERSION:="latest"}"

TEMP_DOWNLOAD_PATH="$(mktemp)"
REPO_SUBPATH="LamaAni/zbash_config"

function install_lib() {
  log:sep "Prepare temp files"

  URL_BRANCH="$VERSION"
  if [ "$URL_BRANCH" == "latest" ]; then
    URL_BRANCH="master"
  fi

  local get_script=""
  GET_SCRIPT_URL="https://raw.githubusercontent.com/$REPO_SUBPATH/$URL_BRANCH/get?v_$(date +"%S")=$RANDOM"
  log:info "Downloading $GET_SCRIPT_URL"
  get_script="$(curl -sL "$GET_SCRIPT_URL")"
  assert $? "Failed to download versioned get script"

  log:info "Getting version script"
  echo "$get_script" | bash -s "$VERSION" >|"$TEMP_DOWNLOAD_PATH"
  assert $? "Failed to download zbash_config compiled script" || return $?

  log:sep "Installing zbash_config as $(whoami) @ $INSTALL_LOCATION"

  mkdir -p "$INSTALL_LOCATION"
  assert $? "Failed to validate install location @ $INSTALL_LOCATION"

  if [ -f "$INSTALL_LOCATION" ]; then
    rm -rf "$INSTALL_LOCATION"
    assert $? "Failed to remove old code" || return $?
  fi

  cat "$TEMP_DOWNLOAD_PATH" >"$INSTALL_LOCATION" && chmod +x "$INSTALL_LOCATION"
  log "Installed OK -> $INSTALL_LOCATION ($(wc -l $INSTALL_LOCATION) lines)"
}

function cleanup() {
  local code=$?
  rm -rf "$TEMP_DOWNLOAD_PATH"
  assert "$@" || return $?
  return $code
}

install_lib
cleanup $? "Failed to install" || exit $?
